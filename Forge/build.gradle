plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

if (System.getenv('VERSION') != null) {
    version = System.getenv('VERSION')
} else {
    version = "${minecraft_version}-${mod_version}"
}

archivesBaseName = "${mod_id}"

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'

            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'

            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'

            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly project(":Common")
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

sourcesJar {
    from(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("mods.toml") {
        expand "version": project.version
    }

    exclude '**/*.accesswidener'
}

jar {
    archiveClassifier = "original"
}

shadowJar {
    //shoehorn shadowjar to be the main jar, allowing SBL and FBL to live in the same classpath.
    from sourceSets.main.output
    archiveClassifier = ""
    relocate 'net.tslat.smartbrainlib', 'com.klikli_dev.forgebrainlib'
    finalizedBy 'reobfShadowJar'
    dependencies {
        include(project(':Common'))
        include(project(':Forge'))
    }
    processResources.exclude('**/services/net.tslat.smartbrainlib.SBLLoader')
}

reobf {
    shadowJar {}
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            artifactId = 'forgebrainlib'

            artifact shadowJar
            artifact sourcesJar

            pom {
                name = 'ForgeBrainLib'
                description = 'Forge-Only fork of SmartBrainLib with support for older versions and a fully featured maven.'
                url = 'https://github.com/klikli-dev/ForgeBrainLib'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/klikli-dev/ForgeBrainLib/version/1.19.3/LICENSE'
                    }
                }
                scm {
                    connection = 'scm:git:ssh:git@github.com:klikli-dev/ForgeBrainLib.git'
                    url = 'https://github.com/klikli-dev/ForgeBrainLib'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://repo.repsy.io/mvn/klikli-dev/mods"
            credentials {
                username = System.getenv('MAVEN_USER')
                password = System.getenv('MAVEN_PASS')
            }
        }
    }
}